#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Structure to represent a student
typedef struct {
    int rollno;
    char name[20];
    float marks;
} Student;

// Function to parse the string and initialize the array of structures
void initializeStudents(char input[], Student students[], int numStudents) {
    char *token;
    int i = 0;

    // Extract the first token (roll number)
    token = strtok(input, " ");
    while (token != NULL && i < numStudents) {
        students[i].rollno = atoi(token);

        // Extract the next token (name)
        token = strtok(NULL, " ");
        if (token != NULL) {
            strcpy(students[i].name, token);

            // Extract the next token (marks)
            token = strtok(NULL, " ");
            if (token != NULL) {
                students[i].marks = atof(token);
            }
        }

        i++;
    }
}

int main() {
    int numStudents, i;
    char input[100];
    Student *students;

    printf("Enter the number of students: ");
    scanf("%d", &numStudents);
    getchar();  // Consume the newline character left by scanf

    // Dynamically allocate memory for the students array
    students = (Student*) malloc(numStudents * sizeof(Student));
    if (students == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }

    printf("Enter student details in the format 'rollno name marks':\n");
    for (i = 0; i < numStudents; i++) {
        printf("Student %d: ", i + 1);
        fgets(input, sizeof(input), stdin);

        // Remove the newline character from the input
        if (input[strlen(input) - 1] == '\n') {
            input[strlen(input) - 1] = '\0';
        }

        // Parse the input string and initialize the structure
        initializeStudents(input, students, numStudents);
    }

    printf("\n");

    // Display the student details
    for (i = 0; i < numStudents; i++) {
        printf("Student %d:\n", i + 1);
        printf("Roll No: %d\n", students[i].rollno);
        printf("Name: %s\n", students[i].name);
        printf("Marks: %.2f\n", students[i].marks);
        printf("\n");
    }

    // Free the dynamically allocated memory
    free(students);

    return 0;
}
